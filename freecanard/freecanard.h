#ifndef FREECANARD_H
#define FREECANARD_H

#include <FreeRTOS.h>
#include <semphr.h>
#include <queue.h>

#include <stdint.h>

#include "canard.h"
#include "o1heap.h"

/**
 * @brief CAN(-FD) data frame.
 * 
 */
typedef struct
{
    uint32_t id;
    uint8_t data[CANARD_MTU_CAN_FD];
    size_t data_len;
} freecanard_frame_t;

/**
 * The function need to satisfy the following requirements:
 * @param[out] frame    Frame that should be sent.
 * @param extended_id   True if the message should be transmitted with an extended 29-bits ID, false otherwise.
 * @param can_fd        True if message should be transmitted as CAN-FD, false otherwise.
 * 
 * @return 0                Success.
 * 
 * @return <0               In case if error.
 */
typedef int8_t (*freecanard_platform_send)(
    const freecanard_frame_t *const frame,
    const bool can_fd);

typedef void (*freecanard_on_transfer_received)(
    CanardInstance *ins,
    const CanardTransfer *const transfer);

typedef struct
{
    void *user_reference_;
    O1HeapInstance *o1heap_;
    SemaphoreHandle_t mutex_;
    QueueHandle_t processing_task_queue_;
    freecanard_platform_send platform_send_;
    freecanard_on_transfer_received on_transfer_received_;
} freecanard_cookie_t;

void freecanard_init(
    CanardInstance *const ins,
    freecanard_cookie_t *const cookie,
    const uint8_t canard_node_id,
    uint8_t *memory_pool,
    const size_t memory_pool_size,
    const UBaseType_t processing_task_priority,
    const UBaseType_t processing_task_size,
    freecanard_platform_send platform_send,
    freecanard_on_transfer_received on_transfer_received);

int8_t freecanard_subscribe(
    CanardInstance *const ins,
    const CanardTransferKind transfer_kind,
    const CanardPortID port_id,
    const size_t extent,
    const CanardMicrosecond transfer_id_timeout_usec,
    CanardRxSubscription *const out_subscription);

int8_t freecanard_unsubscribe(
    CanardInstance *const ins,
    const CanardTransferKind transfer_kind,
    const CanardPortID port_id);

/**
 * Transmit UAVCAN subject.
 *
 * Note: The transfer ID need to be persistent (declared in global scope, or as static)!
 *
 * @param ins                   Canard instance
 * @param message_id            ID of the message. Can be found in the autogenerated header file for the message.
 * @param priority              The priority level of the message to be enqueueted on.
 * @param payload               The payload that should be sent. This is obtained through the 
 *                              encode function for the message.
 * @param payload_len           The length of the payload
 * @param transfer_id           The transfer ID of the message.
 */
void freecanard_transmit_subject(
    CanardInstance *const ins,
    uint16_t message_id,
    CanardPriority priority,
    const void *payload,
    size_t payload_len,
    uint8_t *transfer_id);

/**
 * Transmit a UAVCAN service request
 * 
 * Note: The transfer ID need to be persistent (declared in global scope, or as static)!
 *
 * @param ins                   Canard instance
 * @param destination_node_id   ID of the node which should receive the request.
 * @param response_id           ID of the service request.
 *                              Can be found in the autogenerated header file for the service.
 * @param priority              The priority level of the message to be enqueueted on.
 *                              Note: Need to be the same as the request.
 * @param payload               The payload that should be sent. This is obtained through the encode
 *                              function for the message.
 * @param payload_len           The length of the payload.
 * @param transfer_id           The transfer ID of the request.
 */
void freecanard_transmit_request(
    CanardInstance *const ins,
    uint8_t destination_node_id,
    uint8_t response_id,
    CanardPriority priority,
    const void *payload,
    size_t payload_len,
    uint8_t *transfer_id);

/**
 * Transmit a UAVCAN service response
 *
 * Note: The transfer ID need to be the same as the received request!
 *
 * @param ins                   Canard instance
 * @param destination_node_id   ID of the node which sent the request, and should receive the
 *                              response.
 * @param response_id           ID of the service response.
 *                              Can be found in the autogenerated header file for the service.
 * @param priority              The priority level of the message to be enqueueted on.
 *                              Note: Need to be the same as the request.
 * @param payload               The payload that should be sent. This is obtained through the encode
 *                              function for the message.
 * @param payload_len           The length of the payload.
 * @param transfer_id           The transfer ID of the response.
 *                              Note: Need to be the same as the request.
 */
void freecanard_transmit_response(
    CanardInstance *const ins,
    uint8_t destination_node_id,
    uint16_t response_id,
    CanardPriority priority,
    const void *payload,
    size_t payload_len,
    uint8_t *transfer_id);

void freecanard_process_received_frame_from_ISR(
    CanardInstance *const ins,
    const freecanard_frame_t *const frame,
    const uint8_t redundant_transport_index);

void freecanard_process_received_frame(
    CanardInstance *const ins,
    const freecanard_frame_t *const frame,
    const uint8_t redundant_transport_index,
    TickType_t timeout);

#endif // FREECANARD_H